version: '3.5'

networks:
  coronaZ:
#   app_subnet:
#     external: true

services:

  coronaz-frontend:
    build:
      context: ./coronaz-frontend
      dockerfile: Dockerfile
    volumes:
      - './coronaz-frontend:/app'
      - '/app/node_modules'
    ports:
      - 3000:3000
    depends_on: 
      - coronaz-backend
    networks:
      - coronaZ
    
  coronaz-backend:
    hostname: coronaz-backend
    build:
      context: ./coronaz-backend
      dockerfile: Dockerfile
    ports: 
      - 9000:9000
    depends_on: 
      - coronaz-db-consumer
      - mongo
    networks:
      - coronaZ

  zookeeper:
    image: confluentinc/cp-zookeeper
    hostname: zookeeper
    # restart: always
    ports:
      - "2182:2182"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    logging:
      driver: "json-file"
      options:
        max-size: 500k
        max-file: "3"
    networks:
      - coronaZ

  kafka:
    image: confluentinc/cp-kafka
    hostname: kafka
    # restart: always
    ports:
      - "9094:9094"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://kafka:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://kafka:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    logging:
      driver: "json-file"
      options:
        max-size: 500k
        max-file: "3"
    depends_on:
      - zookeeper
    networks:
      - coronaZ
    
  mongo:
    image: mongo
    restart: always
    hostname: mongo
    environment:
      - MONGO_INITDB_DATABASE=coronaz
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=pass
    ports:
      - '27017-27019:27017-27019'
    volumes:
      - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - coronaZ
    
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: pass
    depends_on: 
      - mongo
    networks:
      - coronaZ
    
  coronaz-db-consumer:
    build:
      context: ./coronaz-db-consumer
      dockerfile: Dockerfile
    restart: always
    depends_on: 
      - kafka
      - mongo
    networks:
      - coronaZ

  # zombie-test-node-1:
  #   build:
  #     context: ./coronaz-zombie
  #     dockerfile: Dockerfile
  #   depends_on: 
  #     - kafka
  #   networks:
  #     - coronaZ

  # zombie-test-node-2:
  #   build:
  #     context: ./coronaz-zombie
  #     dockerfile: Dockerfile
  #   depends_on: 
  #     - kafka
  #   networks:
  #     - coronaZ

  # zombie-test-node-3:
  #   build:
  #     context: ./coronaz-zombie
  #     dockerfile: Dockerfile
  #   depends_on: 
  #     - kafka
  #   networks:
  #     - coronaZ